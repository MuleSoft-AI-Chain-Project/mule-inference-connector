<?xml version="1.0" encoding="UTF-8" standalone="no"?><mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:mac-inference="http://www.mulesoft.org/schema/mule/mac-inference" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation=" http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd    http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd    http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd    http://www.mulesoft.org/schema/mule/mac-inference http://www.mulesoft.org/schema/mule/mac-inference/current/mule-mac-inference.xsd     http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">

	<munit:config name="read-image-base64.xml">
		<munit:parameterizations >
			<munit:parameterization name="config-openai" >
				<munit:parameters >
					<munit:parameter propertyName="config" value="OpenAIVision" />
					<munit:parameter propertyName="llmModel" value="${openai.visionModel}" />
					<munit:parameter propertyName="inputCount" value="8511" />
				</munit:parameters>
			</munit:parameterization>
			<munit:parameterization name="config-mistralai" >
				<munit:parameters >
					<munit:parameter propertyName="config" value="MistralAIVision" />
					<munit:parameter propertyName="llmModel" value="${mistral.visionModel}" />
					<munit:parameter propertyName="inputCount" value="55" />
				</munit:parameters>
			</munit:parameterization>
			<munit:parameterization name="config-openrouter" >
				<munit:parameters >
					<munit:parameter propertyName="config" value="OpenrouterVision" />
					<munit:parameter propertyName="llmModel" value="${openrouter.visionModel}" />
					<munit:parameter propertyName="inputCount" value="15" />
				</munit:parameters>
			</munit:parameterization>
			<munit:parameterization name="config-azure-ai-foundry" >
				<munit:parameters >
					<munit:parameter propertyName="config" value="AzureAIFoundryVision" />
					<munit:parameter propertyName="llmModel" value="${azure-ai-foundry.visionModel}" />
					<munit:parameter propertyName="inputCount" value="771" />
				</munit:parameters>
			</munit:parameterization>
		</munit:parameterizations>
	</munit:config>

	<munit:test doc:id="b3144fa3-60d9-41f1-9c26-ab5eae501685" name="read-image-base64_operation_test">
		<munit:execution>
			<flow-ref doc:id="a79786d9-29f4-4966-996f-fef6f2abcfc7" doc:name="Flow-ref to chat_completion_operation" name="read-image-base64_operation"/>
			<logger level="INFO" message="#[payload]"/>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-that doc:id="e45fe6bd-e51a-40e6-9c18-e1cc92295832" doc:name="red in payload" expression="#[payload.payload.response]" is="#[MunitTools::containsString('red')]" message="Payload response is wrong answer"/>
			<munit-tools:assert-that doc:name="car in payload" doc:id="1c9a0319-420e-4194-a0a1-6e8d21f28782" message="Payload response is wrong answer" expression="#[payload.payload.response]" is="#[MunitTools::containsString('car')]" />
			<munit-tools:assert-equals actual="#[attributes.tokenUsage.inputCount as String]" doc:id="b125348b-26d7-4388-9c88-4dfc6351d22a" doc:name="Input Token" expected="${inputCount}" message="Incorrect Input Token"/>
			<choice doc:name="Choice" doc:id="7bf96226-fd72-45a5-a3ca-f28d45cdd6e3" >
				<when expression='"${config}" == "AzureAIFoundryVision"'>
					<logger level="INFO" doc:name="Logger" doc:id="e5fb99e2-b414-4ddb-9a37-e0c714fcd437" message="Skipped Azure AI Foundry Model Checking"/>
				</when>
				<otherwise >
					<munit-tools:assert-equals actual="#[attributes.additionalAttributes.model]" doc:id="ba201df7-81f2-4404-baee-755c49b3a20f" doc:name="model Info" expected="${llmModel}" message="Incorrect Model Info" />
				</otherwise>
			</choice>
			<munit-tools:assert-equals actual="#[attributes.additionalAttributes.finish_reason]" doc:id="a2b27c93-45b9-4373-91e7-e7838cf6e9f2" doc:name="finish reason" expected="stop" message="Incorrect finish reason"/>
		</munit:validation>
	</munit:test>

	<sub-flow doc:id="df9ead27-c4c2-4b35-87d7-0437bb2316d2" name="read-image-base64_operation">
		<set-variable doc:id="9c40489f-6ff6-4bbc-90ae-50c8873a124b" doc:name="Set Variable" value="#[%dw 2.0    output application/json    ---    &#10;{&#10;    &quot;prompt&quot;:&quot;What do you see&quot;,&#10;    &quot;imageUrl&quot;: &quot;/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEAAkGBwgHBgkIBwgKCgkLDRYPDQwMDRsUFRAWIB0iIiAdHx8kKDQsJCYxJx8fLT0tMTU3Ojo6Iys/RD84QzQ5OjcBCgoKDQwNGg8PGjclHyU3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3N//AABEIAKMArQMBIgACEQEDEQH/xAAcAAABBQEBAQAAAAAAAAAAAAAEAQIDBQYABwj/xABLEAACAQMCAgYFCAcDCgcAAAABAgMABBEFIRIxBhMiQVFhFHGBkbEHMkJScqHB0RUjU2KC4fAWovEkJTNDY3SSk9LiNDZEc6Oyw//EABoBAAIDAQEAAAAAAAAAAAAAAAABAgMEBQb/xAAtEQACAQIGAQIEBwEAAAAAAAAAAQIDEQQSEyExUUEFFCIycZEzQ1JhgdHwQv/aAAwDAQACEQMRAD8A9L1O+isIEMqM3WyCIcC8ic8/d8K5hud80txcRR4ikkjV3OyFgC3sphqUnuQSINSX/N9x2mx1R9/9YrHdIDwdDrh23ZXABO5HbX862lxGJoHicKUcEEY5jHhmsl0tiWHovcQQs7ZkQ5kXhO7r3ZqPKJLZma6JpcR6/pkrcJjuGlVe1v2VOc++vSWCIA7KPLi3/CvKtEkm0vWbG5vXf0W3ZwEwx4Synbl5itpP0n024i4YbrtuMqOA7nfbyppqOxK0pbk+qa3cRXMccfCx3z1ZGAMY3Pjv99DwX96tzeC9eJ2a3LMgQbDbG/v2qptdPlGsLBIzvHJl3EbbnPd4eAJq+mtQk9ykk9ukrWwXh65c7Y2wTmo78sm3GKykDJmInq4WyPpJj4Gp7G1iN7OAgBa0gZgOWeEgVFHPbyERddG0pxsjA52qeS5i0ySa6u+JIBbQx8QXm2G2HiaWpBu1yiKYBc6dw6I8ZXJ9JUAcXkKiu4Q19DJiUcFxJkNLnu7tuXgKr7vpil4DbWdsWVWVjjdgR44qws5NQvriGZdKmZQ7SZxhdxjmfVTk1wSjGT3sVsc6LKkfE7HqnIUdocO/f3mut57aOOC6ZVBDkF0XHLYkD7/XVvF0cvfSlmX0eMdQ8fVtMCAWzuMZ8RUMPQ68a0MUt7bce/C0Yc4z3fNFUKlvdNl6zdFL0puoroM5EjRxkfrJBwEc8/16qyLXManhVVI8N+fvr1fUuiAv7fqDeOqnclYM597CqxPkvsCoEup3jBTnswoPiTV9rlcoTb4MXqbPHpmnFG4eJWJUescvfQl5dFmgaZgWEahTywAMYFenXvQDTbuG1ja8vkW3TgU5jGckbnbypbj5N9Fn4BxXycO3YlXceG4NJINKZ5G97iLiUld9uzkk91GaPJE0kqrG0ZVMg8WR57evFejr8lehHlPqWPOSP/poi1+TfR7V5GiuNR7acBGIyMbeXlTcRqEkeRW07xSJwyEoTwkkDY/nVprciDVZlRBEFwoCJkHBIzuf5V6CnyX6SJQ8Wp36gEZV4UIJ7s4qef5NdOupnlu9WnYscgCIpjPPkaLAoNvfYH1M3zdMtHS/6qSSFTI7RIVAGWxt44FaGDpDaXoeOzkaS4MbNGjwsgO3Ik1j01J7nWoNQlcyToOAIm4YDOMjv3J76sF6TQwOZILO0WQYBw+KjvcsrTjOMEvCNBf3F5J0ankuoRBcG3cyIvEQrd2D3++vPo7qaS4iiduIFtlPWYHhzbHOtLqfSg32lXMTJCiMvCXDlgpPIcu/lWGtH/y2HCHHF3x4/Gh8lUeLE2rakIr24txaqyxyMFcSsDnvOKr4r9WPVXFu7xsmMJIFIG/iN+dXeuaNeXGp3c0VnMytI3AUdMH2Heqn9C3yEg2Fx3fQB2Huo2LL+CZLy0QD0e2uUZdgerjbHj4V3p1sz8TS3RfwaFcY9jVyWd1JxI9vJEznnImP8fUN61mh9DiQsl5xJjkGUFj7OS+s5PqpxjmE8qV5MpLK2N6VMcOWY5UYkBYeIXJz6ztWrt+jtzeQRxajK3o6EMInfrGyBj1eO29aKx0+GxQrbxImeZbcv6z3mjEiH08+2rI0Yp38lEsQuIoqbbRbW2RVt1RCv0goYj7tqKELZPbkPnwqM/dR4ZEO1I86/Vq3KiHuKnlsE6lv2zD+L+VJ1S987Z9n5U9uJn4hy+zTXHE3E+5HIUZUPXn2xhiX9u3938qaYf8Abt/d/KiFCnepQsfetLKh+4qdga2zftz/ABY/Kni2m+hKv9e2icJXUZUHuKvZCbS8CcWUb1N/OhuvuEPBjDd44j7+VHOVCFvCqXULzq+Mq4Ud7N3CoTSRqwsqtWTTey5JbnU47dC0sgCp8589/hj+jQA1bUrjtW1keAd8jEE+wDA99RWFq13ILq5U8A/0UZ5AeJ8/8PHNyF4RjGPKiMOxYjF2dqZiE0a1ik41tUU+Vy+fjRXo8S78LHy9IY/jUK3B4Sgdi/ecU9ZBGnF+sOOZXuFcl4qpzsVX2HNBGw4TCCrc1MrYPrFMisrQMWW0gBU5GM7Gnxyxy4aKQ8P71FRJbiM3F1LiJdhvjiPh4mlCvVqSshxTlwOe4cPjiXf11Jbel3chS0VHUHDysMIh9fefL4Utrpy3jLNJF6PajcR8R6yT7R7h5e/wq6j7KLFEAFAwABjArpUqVTmb/gjOoobcsbY6fb2r9dI7z3GN5JBv/D9Ueqj1kH0VqKKI/TogEIOxWm/RllJyd2OG+5rs0zjzua4sq70tyIrdnfhqMs1I83FtULNUkMmWTelebJA5edDYbFdhqLAE53ri3DvxULxUnFRYArrqYZag4qinm6uMk8zsKfBKMXJ2R15c7cIbsDf21SMy3moJAz4jzxzN4gbhfgfd50+9uhFGWZvm7Y/eOAPv2oKCPqnhkkftSBuP18/zqhfFK51atsNQUFzI07XdtEoEe4GwFDPqOT2V2qvV8nhVck99TrBKBtCx/hq3ZHKUZPhGZW8QY4ZF3wd8ePnSi4AYLs7NtwqOf31a2PRC2jGbpg5+ouw+Oatbeyt7NeC0to48bHhGPee+uX7VHSjh5Pkz0Om3r9a8toix47Ch+03r8KLsbCdCJrtGLrnq1G6RfZ8/Or1Uc7nHsFSLFWmlBU+EW+2ja1ynbWo7chZEnU9ymE0jdJ7eLZ4Lnbf/AEDfnV6sbVIsbVfqMqeCh4Zl5PlC0eDszF08eJCPiafb/KBpNyeG1WWY/ViUsfurUdW31q4wBtnAbP1lFGoQeCXZQydK414eLTtTIbfiS2Y49wrk6V2jHD2mpR/aspPwWrttOtG2e1t2+1Ev5Uz9EaZ32Nop8o1FPUIvBfuVv9otLO7vJH5yQun/ANgKfFrukSnEd9AT4CVc+7NHjStK/YRfwkj4Go5tD0aUYeD/AOV/zp6iI+ykctzbsAwfIO4OOdI93aJ8+4C/aGKH/szpI4hEZkBHJJWAqvn6GaZNn/OGr/wXOD8KNRB7KYbPrej25Im1O2RwM4Lb4oZOlOhSKSmpxNjwBPwFVsnyaaNI/G82qv39uZT8VzTo/k86OxHLwSv/AO9KT91LUH7GYZ/azQgSDqCgjYAoy5PtAqWWcTRq6uCjDKEd/hVf/ZnQLedxHplq6IoG8S5J3zk8+WOXiedFRqMBeAIiDAVRgAeFRlUurI24TA5Jakyq1KYMzLPyi5+bY2PsB+/yp0up2E1h1sUvDNFIuUKnOc4O3hgmgdbsZHEpSdoVLHtKCTuc+Ixz8aySR8Fw8vpbMkgwRwY4tsHmw9dEZxStcqxGHr1ZuSiz0OPVY5bkNArwxwnLMwAJJ5Y37t/upH1tQe1eqD4cQ/OvOtQtLdFkupuscl+HhUgZPPuyPv7qsNN6IanfWqXEVrDDG4DIJ7ogsDuDsD99VyTbNeFxFKlT01C7PXOs2HYx50qn92hesZ6UcX1qVy/SQaOKnDioQNtS9bRcWkGYb+lpQjfWb/hoLrftUnXtRcekWHU/vNXG3/eaq/0lqT0pqLj0ZBxt6a0WNuzQLXMjbZ4adCRnid6Vx6TXIYI67gaovTAnzKGudVYDCtvRccaM5cINwR2mVdvrUyTUVhHzkXyVaobi+llb51RNcQWyGe6njiUEEvKwUZ8Mmi5Y8Moq8y5k1F5vmJjzNA3VywQtI2WGyoPpHwH9fCoFvGl4haW7yD67gooPtGT7AR51yQnPW3DB2PzQo7KerPP1n88gRS8EcfEFweZ+d66lj7KlR304DeniPslqBzt5IpYYpoXiZVwR99YDVLM2WoPDIuM5ZB41stQ1mzsF/XSEsPoruw9lZ/UekF1MjG10tEjVciW4APZ8RnH41CaTNOGqSpeNn2VNppNxrjJHG3o9pFxM0rr2R8Aa2C9IdK02CG0e960wxhOJFLchjuyBWEuNSu70k3c8jrjspjCj2cqC4jzPfUdSViLwVJ1HU4v0eyCWf6kbfxkfgad6RP8AsovZJ+aisZY9INUugDbS2k54SxV4DGVA5ksGwO4ZPiKs7i81y0A9I02zKgKxIuTwjPLOFbAPLfAGw760ZJdHNWLw7fzF96U/fbyE+TL+dKLk/SikX2Z+GaysvSe6t/8AxFnaKP8Aff8AsoZunsce3o0G3hcMf/zqNmW+4oeJGz9Li/2n/Kb8qab2D9qi/bPD8aw0vyhj6FlEfsys3xUVNB0rvLlVZHtomYcQjERYgZxueLA55Ix+VCi2J4qgv+jZC7gf/Xxf8wU8OncQR4isTd6rqTsoeeaMP80IIxny3Un76Hnga4XrJ3Lh9sC4k95CsBTyMi/UKa4TZvJLiOMcUjhAO9iB8ar7jpHpFvnrNStQRzXrgT7hmsAEtpdTW3V7ARAZlmmiVv4Qz5Lf14VpEm0NLZYIr9baRT/poJliX1cIxtn1d9NUymXqL8QDj0nguVP6Pt7+8Hjb2jlfeQB7c0FNqeovlY7S0tc8nvL1AR/AhZqubTT9Cv4UjF9FqM4T6MvGzHPME794Gf6Blj0ZW3jVUEnBGcxx8yGIHlueXLNTVNFEvU6/Csigs7driKabUdbmWGPh6wafalAMnAHGwLc/IUtvqGmLdvB0ftF9MVSDdzkyMB39tssfYcVVdO7o2U8Wi2SDh2mn6tgwaRhjfHguABz7Td2CYNBlOlhVmBbs4du9f6/l51GTUOB4elXxs3mbaRsI7wCLhdiJSd2O3GfKpFnVnAPPvoAlJBlDxIfbUF3cLp8D3LPhEGQrDZj3Dy8Kpud2NJRjlRZ6nfWunwiS5kCA7jfn7KpJOm1oH6tLO4lTkWyAT7Kwmua1c3t0XY8cpGAM5EY8Pxqha4uUbtSSKfXj7qajJ78GCviqNN5LOVuj0TUby21CWS5sgYXVkdOP5wPie7nVJc3VzMMy3Er8W27Heq3R9SkaRI5ypfPZY9586sgjMxJThB3zVcrrZm7D1adaGaIMiOx7RyPGp1hwKlUYrqgXOQkF6mn3M62czQLPwFCJhJgAkFGPfnLefKre+6V3MMU0a3dtMkkLRjghHWOXzzI7hnO53O9HTfJhqqMWt720kThxwuXXPnyI94zVdN8nHSFIQscNpKQ2TwTqDj1lR79vVXTjmirHi55ZyzFJHYPfMZ9QvfRye5oJGIHuGKMi0bo+Npdak4vscP4VM/Q7pNb9YU065H1OqkHvyGPwoSXS+klnCjzxarGoB4mdnGPcMY/r10OEuzdSxVGH5aZYQaH0aJGdUDHOQWbkfGr2C00cgKdXiJxsVlA/GsKt3fmWQNLI6hTwhgCT7y3wp0MlywLXEcYI7vRo9x/w1DTl2a4+o0V+Ul/voegx6DYSHKXvWZ/eD09tAsk+dKx8urX8RXn/AF8eR6RZof34m6tx7CcH2qKPh1LULFFubG8e6tPmkSAnhP1WH0T5jbzqMotbs24fG4eo7cP6I1v6I05D2YC5/ex+GKFvbiysFZI4IzIB81QNvWaEi6QreWh6kmO4Iwy8yPs+NA+iF4+sunaONjntHBYes8vWaqb6OxTgpK5d9Fr2yRbjU7xYlHW9iMKFJAXmMbjc8/Ki9c6YatrkRt9GRba3bIM0Y4cjyP8Aj6qy0d9p1lIWEEU5Byq8GeDyDHlQ2pa/ean+qdhFD3Rx7D2nmat11GNjjT9KVSu5zly+EMhFtZlhxdZMxy83PfvwfHzomC4hkOFf+GqdmJI9XdSq4EnFnhYcqzObk7s69KEKcVGCsjUW989sOBXVVPJG8apOkOoSzOI2kLAd3cW/r8aY1/IEwyqx7mqvQma4LNzB4j7ash8TM3qNdUKN1yOhjS1j4pFJdjnJqZmtLqJo7gZ8PAH8K1PR7R41EV5dRK8jkdWrrkIuCQ3hk4933LBbw9IvSrY8EoiYoCFzLE2SBgDzB9YFbDx7dzzeeF7S7MYJKghkPl3GtPaSdbCpPeAarNatnhDR3CgT20pRyO8Hb3Zxj11Pob5tQvgxH41TWXk6XptRqbh2HfRP2qaTvT+5vXTcVQdlNvZHvXqrq+eLbpPr8CKsOq3KrgDAOAMeYwaNX5QOkscfY1ADB5lASffkV09RHj8jPeqqulX/AJX1T/dJfga8ng+U3pLCBxvbTbc5IQM+7FdqHymazfafc2dza2HDcoY2aMMG4TsebEGk5qwKLuUlk+bWMeGPE1PJ876I8/8AHNVMFzPEvV8K7fuk/wAjUh1EooYhck4I4+HPtGaruTD25/Ob2Z/Daujke1czWp4ZGGJAccMg+qwzuPvoT05SM9V9xP34pDqiqOHq2/4gfw/nQMIkKNi6tOOPhPbQnBib8vCkMzTMWlkZ3z9I5zQvpp6xXiQdZ9JQrdtfAip5EHCJYT+rJwQfoHwNZ6lO+6O56fj3+HUH00imhqetZ2juZrjM705DvSsuN6bUcoJkjuvARw+dJpqLNdIrg8DEs+OZUbn7s+6opjwQO3lj37VbdEI4X1RDctwxLE5Y8YTAxjmfXWqhGxwvWKrcox6NN0UumudEN3ckIzzu4Dd2WIArXadpEHRrTZrK031C9Yz3k/fCrZIGe5iCQPDc+ugF3p9nax29jbHqUUTB2k6xMFxgnA3GT7dxRH6R1GbVrDSgDJbzGSS4nOCxbBPV+WOzz3PdsDWhHDMZ09hX9JzSwqojnteIFeWV8PYFqh0Q/q2+1+Fa75SIPRp7WPGOG3c/dWS0jsgnz/Cq6nBuwH4xZA9o01nXPzmpba0ur6VoraN5WznC9w+4D31aRdF3C/5XqNraseSFgx+IrPlO5rZVsY+S2nQDEeRnnsfic0145VDnq2Pv/AZqzm6QmNyk2mWUozgNDxJXDXtNbaXS5E847jPxFXZp9HK0MDL5ajX1RUGMlu2nDt9X8/ypq44DwY593/aPwq+XVdDb/V38fqCtUgudAf8A9ZcJ9uDPwNGo/wBI/YUH8tZfYzxVeMZ4c47/APH8KQEAPw49h/6d60ir0eJz+kwufG2aps9GYky2oPMw3xHDjPluKNT9gfpsVvqozsUE1yVEURZuRIXPvJ3qYwrbyiGIek3h7OF3VPzP3VZSavp84aCGT0C1OOIrEzSv627h5Vb6bdaJZRcOmo1xIRuE+dnz4qmlm3eyKJKnSeSj8Uu/6KeLopeyw9e8gWcnJVt/v8ajl0m80xTcTPGUY4kjJ5jxPw91aJ7vUrw8MRtdPj/aTNlh/XlUI07RTJ1mqawL2UcwZwoz6hy99Nzj4FDAYiTu9vqZu3hkmVmhibgBwcDOKcqFd25VtYde0LT4Vht5YlRR8yGIkfD76z+ua9FqLRpDFwRpyB7/AF1lmuj0uHywpqM5XZVtsMDtZ+6mA8FJ1lO6yPG/Oo2E6kfA29k/yDAbJaQdjhA29fso/o5LbxNcyXcEc8KW0j9XIuVbh7XLl3e+qrUjEYoeqZSc7r9Xn+dE6M8YnCTf6OVGR8HkrDhPtwTWml8p5vHyzV2z0/oy150k6Oi5UR2cbSxwxxJGjL1YYlh83lhDgedQwi6h1ltS0qRpopZWE1uBuuScMuOYJ9oJz6rXo3ay6L0b02yYJJMivK3A2VLcJIwfA771VdHtIm0rRJbqbUY5ltu1JJnsqTglVIG/j37+GausYEZf5Sb7r9Uwxb9VAqFWGCCd8H2EVlYL+2hhCIJXlySBsBiiOlF5JfXsk0jcUk0hkby/r8KpEhc8+dVySfJbTqSp7xLCTXdSaPqY5jBCTngj7OfzoJmaVi0kshJOdyTU8NnK/wA3l31a2vRq5uo+OGSBh4F9x684pbIcqlSfLK2VP3aHaP8AdrYyaGzOycJ4hy4vCq+50dowDjOTj1UXI2M1w0mKvZdHkXJ4GGO6h305u5d6YrFQaaas2sXBwVqI2TZ+bQABXBm+tRptH7lbHf2aQ2ox2e0veeHkfCgN0DCaUbcX90UvXy/W+FTC2b6tL6K31aVkT1Z9v7g/Xy/W/uiu9In+t/dFEizb6tPWxZtl50WQatT9TAjcStsZGphJ79zVomlSt9Gn/oSf6mfPwp7CcpvkqkNHWs/AV9dF/wBnbsgFFzmpYOi+pTH9Twbc+JqLkbGx6OdLHtYEiuIxcIi8KcT4aNc93MEc/eah6T9KZ9UihsERIoFOUt4DkcXeWPfVLZ9FL8twz3MMXkASce+r/TOjdtY5kmlaVxsGYlR8NqbmCiZuLR5JpOOUni5Z7qtYdBCAcYA8x3Vq7bTZnIWONpEX6o3Hv/lRh0a5QdmM8P1WK/jULkjM2+kRR4JXJ7nGKJFkpG8ccnmzAfnV/aaXJI7LEqh+LBi41G/qP4UtxpNzEV6y1dWb6g6wH2ry9RpDA7r5hPmPjUTRI47ag0tdS8jBpLeIZAQUCbeFbl8RgZAzS11SAE1CCIKpEa5UjHlmuktYOE/qlrq6gQCIYihHAMAn40HcRRhowEXGT3eVdXUCJ47O3LoTEucUS1rBx46pa6uoGOS1g4n/AFS91FNawAIREuc11dUQLEW0Dc41NS20MZUjgGFbA8q6up+Rk3CBOABtw0asERIYr2uWcmurqEArQxsHBXIU5G/KktmL2yMxyTsT5V1dR5AW3VRLInCpUYwCM1c3cxthaywJCkjNwswhXcZ9VJXVEQy41G5AXeI8/nQIfiKgtdTupEJcw7HAxAg/ClrqT5Gf/9k=&quot;&#10;}]" variableName="testPayload"/>
		<mac-inference:read-image config-ref="${config}" doc:id="f2d53937-53d0-4964-b3e5-272c779ffd84" doc:name="[Image] Read by (Url or Base64)">
			<mac-inference:prompt><![CDATA[#[vars.testPayload.prompt]]]></mac-inference:prompt>
			<mac-inference:image-url><![CDATA[#[vars.testPayload.imageUrl]]]></mac-inference:image-url>
		</mac-inference:read-image>
		<ee:transform doc:id="02c49472-abaf-4e69-8a23-431c8b698b07" doc:name="Transform Message">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
					output application/json
					---
					{
						payload: payload,
						attributes: attributes
					}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</sub-flow>
</mule>